# A summary for all the new learnings in this project

* Shadcn ui is because it works in a different way chat cnui is not a component Library instead it is just a a I don't know exactly what is the correct
phrase for that but what it allows us to do is to keep the components inside of our components folder usually when we
use material UI or chakra we have no access to the components we can import them and we can edit them using the
props they've given us but we have no access to the actual code that there
that the way those components are working they are in node modules

1. npx shadcn-ui@latest add button

2. every folder we create inside of the app folder which has the page.tsx inside of it is a route on its own, 

3. route groups are is especially named folder which does not affect the URL 

4. the convention the convention is to write the folder inside of parenthesis that way it's not going to be affecting the URL

5. add parentheses around the dashboard, it's not affecting the URL

6. Adding authentication = clerk,, clerk is that they have support for the app router

App Router vs Pages 

7. An "app router" typically refers to a component or module responsible for handling the routing within a web application. It determines which components or pages should be rendered based on the current URL or route. 

* The app router listens for changes in the URL and navigates to the appropriate component or page accordingly. On the other hand, "pages" typically refer to the individual components or views that are rendered based on specific routes. Each page represents a different URL or route within the application. 
* Pages are responsible for rendering the appropriate content and handling user interactions specific to that route. In summary, the app router manages the overall routing logic of the web application, while pages represent the individual components or views rendered for specific routes.

8. Clerk is installed and mounted in your application, itâ€™s time to decide which pages are public and which need to hide behind authentication. We do this by creating a middleware.ts file at the root folder (or inside src/ if that is how you set up your app).

9. Sign up and sign in page. 

10.  we have to create another folder go ahead and open square brackets then again open square brackets inside so double square brackets this is another next 13 convention that allows a clerk to have all the necessary routes it needs for authentication and inside you're going to spread using three dots sign [[...sign-up]]

11. want to change this to register you can do that as well and make sure you change that and it has to match this to environment variables

12. that's why I separated this in a folder called routes so there's a very clear distinction that the routes are only inside of this folder and this layout thing is inside this main group folder right here perfect

13. Styling components

14.  I'm going to wrap this inside curly brackets like this and I'm going to add CN and I'm going to import it from add slash lib slash utils like this so great now that we have that I'm just going to separate it because I like to keep my personal inputs below and Global inputs at the top like that and how CN works is that it accepts class names inside of its parenthesis but you can add both the default class themes like this and then you can add a comma and in here you can add conditional class names or specially generated class names {cn('text-2xl font-bold', monsterrat.className)}

15. What is Lucide? Lucide is an open-source icon library that provides 1000+ vector (svg) files for displaying icons and symbols in digital and non-digital projects. The library aims to make it easier for designers and developers to incorporate icons into their projects by providing several official packages to make it easier to use these icons in your project.

16. one thing I just want to tell you is don't accidentally import stuff from Radix because there are similar renamed components from Radix which are the underlying library that chat CN uses

17. hydrate lets you display React components inside a browser DOM node whose HTML content was previously generated by react-dom/server in React 17 and below.

18. Understanding the aim of the whole project vision helps with the strategy. 
* What to develop?
* When to develop?
* Where the things are supposed to go as well.
* So the order and structure of project and code all is necessary.

19. have an error because I'm using use form which is obviously in the hook meaning it uses a context 

20.